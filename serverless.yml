service: ServerlessAppWithLayers
provider:
  name: aws
  stage: dev
  runtime: nodejs8.10
  region: us-east-1
  environment:
    DDB_TABLE_NAME: ${self:custom.messagesTableName}
  iamRoleStatements: 
    - Effect: Allow
      Action: 
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/${self:custom.messagesTableName}'
functions:
  getMessages:
    handler: functions/getMessages.getMessages
    events:
      - http:
          path: getMessages
          method: get
    layers:
      - {Ref: ReverserLambdaLayer}
  putMessage:
    handler: functions/putMessage.putMessage
    events:
      - http:
          path: putMessage
          method: post
    layers:
      - {Ref: ReverserLambdaLayer}
layers:
  reverser:
    path: layers/reverser
    name: ${self:provider.stage}-reverser
    description: String reverser module
custom:
  messagesTableName: messages
resources:
  Resources:
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.messagesTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1